//
//  BLEDeviceDefines.h
//  BleSampleOmron
//
//  Copyright © 2016 Omron Healthcare Co., Ltd. All rights reserved.
//

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

///---------------------------------------------------------------------------------------
#pragma mark Build options
///---------------------------------------------------------------------------------------

/** Build Option：BLE_DEVICE_OPTION_CALLBACK_USING_MAIN_QUEUE
 Callback in the main queue from BLEDeviceManager if defined.
 Callback in the unique serial queue generated by BLEDeviceManager if not defined.
 */
#define BLE_DEVICE_OPTION_CALLBACK_USING_MAIN_QUEUE

/** Build Option：BLE_DEVICE_OPTION_ENABLE_RETRY_FOR_NOTIFICATION_ACTIVATION
 Retry for enable Notification if defined.
 */
#define BLE_DEVICE_OPTION_ENABLE_RETRY_FOR_NOTIFICATION_ACTIVATION

/** Build Option：BLE_DEVICE_OPTION_RETRY_INTERVAL_FOR_NOTIFICATION_ACTIVATION
 Retry interval for enable Notification.
 */
#define BLE_DEVICE_OPTION_RETRY_INTERVAL_FOR_NOTIFICATION_ACTIVATION (1.0)

/** Build Option : BLE_DEVICE_OPTION_RETRY_COUNT_FOR_NOTIFICATION_ACTIVATION
 Maximum retry count for enable Notification.
 */
#define BLE_DEVICE_OPTION_RETRY_COUNT_FOR_NOTIFICATION_ACTIVATION (30)

///---------------------------------------------------------------------------------------
#pragma mark - BLEDeviceManager defines
///---------------------------------------------------------------------------------------

/** BLEDeviceManager state. */
typedef NS_ENUM(NSInteger, BLEDeviceManagerState) {
    BLEDeviceManagerStateUnknown = 0,
    BLEDeviceManagerStateUnsupported,
    BLEDeviceManagerStateUnauthorized,
    BLEDeviceManagerStatePoweredOff,
    BLEDeviceManagerStatePoweredOn,
};

/** Connection state. */
typedef NS_ENUM(NSUInteger, BLEDeviceConnectionState) {
    BLEDeviceConnectionStateDisconnected,
    BLEDeviceConnectionStateConnecting,
    BLEDeviceConnectionStateConnected,
    BLEDeviceConnectionStateDisconnecting,
};

/** Reason for complete process. */
typedef NS_ENUM(NSInteger, BLEDeviceCompletionReason) {
    BLEDeviceCompletionReasonCanceled = 0,
    BLEDeviceCompletionReasonPoweredOff,
    BLEDeviceCompletionReasonInvalidDeviceIdentifier,
    BLEDeviceCompletionReasonDisconnected,
    BLEDeviceCompletionReasonFailedToConnect,
    BLEDeviceCompletionReasonFailedToTransfer,
    BLEDeviceCompletionReasonBusy,
};

/** Characteristic type. */
typedef NS_ENUM(NSInteger, BLEDeviceCharacteristicType) {
    BLEDeviceCharacteristicTypeCurrentTime = 0,
    BLEDeviceCharacteristicTypeBatteryLevel,
    BLEDeviceCharacteristicTypeBloodPressureData,
    BLEDeviceCharacteristicTypeBloodPressureFeature,
    BLEDeviceCharacteristicTypeWeightData,
    BLEDeviceCharacteristicTypeWeightFeature,
};

/** Device classification */
typedef NS_OPTIONS(NSInteger, BLEDeviceCategory) {
    BLEDeviceCategoryBloodPressure = 1 << 0,
    BLEDeviceCategoryWeightScale = 1 << 1,
    BLEDeviceCategoryBloodSugar = 1 << 2,
};

/** Device information key : AdvertisementData(Type of value : Dictionary) */
extern NSString * const BLEDeviceInfoAdvertisementDataKey;
/** Device information key : Identifier(Type of value : UUID) */
extern NSString * const BLEDeviceInfoIdentifierKey;
/** Device information key : LocalName(Type of value : String) */
extern NSString * const BLEDeviceInfoLocalNameKey;
/** Device information key : ModelName(Type of value : UUID) */
extern NSString * const BLEDeviceInfoModelNameKey;
/** Device information key : RSSI(Type of value : Integer) */
extern NSString * const BLEDeviceInfoRSSIKey;

/** Current Time Key : Current time(Type of value : String, format is [yyyy/MM/dd hh:mm:ss]) */
extern NSString * const BLEDeviceCurrentTimeKey;

/** Battery Level Key : Battery level(Type of value : Integer) */
extern NSString * const BLEDeviceBatteryLevelKey;

/** Blood Pressure Data Key : Flag(Type of value : Integer) */
extern NSString * const BLEDeviceBloodPressureDataFlagsKey;
/** Blood Pressure Data Key : Data unit (Type of value : Integer, Unit is ["mmHg" or "kPa"]) */
extern NSString * const BLEDeviceBloodPressureDataUnitKey;
/** Blood Pressure Data Key : Systolic blood pressure(Type of value : Integer) */
extern NSString * const BLEDeviceBloodPressureDataSystolicKey;
/** Blood Pressure Data Key : Diastolic blood pressure(Type of value : Integer) */
extern NSString * const BLEDeviceBloodPressureDataDiastolicKey;
/** Blood Pressure Data Key : Mean arterial pressure(Type of value : Integer) */
extern NSString * const BLEDeviceBloodPressureDataMeanArterialPressureKey;
/** Blood Pressure Data Key : Pulse Rate(Type of value : Integer) */
extern NSString * const BLEDeviceBloodPressureDataPulseRateKey;
/** Blood Pressure Data Key : Measurement state(Type of value : Integer) */
extern NSString * const BLEDeviceBloodPressureDataMeasurementStatusKey;
/** Blood Pressure Data Key : Time Stamp(Type of value : Date) */
extern NSString * const BLEDeviceBloodPressureDataTimeStampKey;
/** Blood Pressure Data Key : User Id(Type of value : Integer) */
extern NSString * const BLEDeviceBloodPressureDataUserIDKey;

/** Blood Pressure Feature Key : Blood Pressure Feature(Type of value : Data) */
extern NSString * const BLEDeviceBloodPressureFeatureKey;

/** Weight Data Key : Flag(Type of value : Integer) */
extern NSString * const BLEDeviceWeightDataFlagsKey;
/** Weight Data Key : Weight unit(Type of Value : String, Unit is ["kg" or "lb]) */
extern NSString * const BLEDeviceWeightDataWeightUnitKey;
/** Weight Data Key : Height unit(Type of Value : String, Unit is ["m" of "in"]) */
extern NSString * const BLEDeviceWeightDataHeightUnitKey;
/** Weight Data Key : Weight(Type of value : Integer) */
extern NSString * const BLEDeviceWeightDataWeightKey;
/** Weight Data Key : Height(Type of value : Integer) */
extern NSString * const BLEDeviceWeightDataHeightKey;
/** Weight Data Key : BMI(Type of value : Integer) */
extern NSString * const BLEDeviceWeightDataBMIKey;
/** Weight Data Key : Time Stamp(Type of value : Date) */
extern NSString * const BLEDeviceWeightDataTimeStampKey;
/** Weight Data Key : User Id(Type of value : Integer) */
extern NSString * const BLEDeviceWeightDataUserIDKey;

/** Weight Feature Key : Weight Feature(Type of value : Data) */
extern NSString * const BLEDeviceWeightFeatureKey;

/** WeightMeasurement definition : WeightUnit-SI magnification (Value:floating point) */
extern const float BLEDeviceWeightSIMagnification;
/** WeightMeasurement definition : WeightUnit-Inperial magnification (Value:floting point) */
extern const float BLEDeviceWeightInperialMagnification;

/** Scan monitoring block.
 @param deviceInfo Device information.
 */
typedef void (^BLEDeviceScanObserverBlock)(NSDictionary<NSString *, id> *deviceInfo);

/** Data monitoring block.
 @param aCharacteristicType Characteristic type.
 @param data Data.
 */
typedef void (^BLEDeviceDataObserverBlock)(BLEDeviceCharacteristicType aCharacteristicType, NSDictionary<NSString *, id> *data);

/** Connection monitoring block.
 @param aState Connection state.
 */
typedef void (^BLEDeviceConnectionObserverBlock)(BLEDeviceConnectionState aState);

/** Complete Process block.
 @param aReason Reason for process complete.
 */
typedef void (^BLEDeviceCompletionBlock)(BLEDeviceCompletionReason aReason);

NS_ASSUME_NONNULL_END
